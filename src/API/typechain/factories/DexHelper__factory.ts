/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DexHelper, DexHelperInterface } from "../DexHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "convert",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    name: "isBuy",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    name: "isSell",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x61047f61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806302825a4d14610050578063202fc6c61461007857806320dc27c21461008b575b600080fd5b61006361005e366004610258565b6100ac565b60405190151581526020015b60405180910390f35b610063610086366004610258565b6100ea565b61009e6100993660046102bd565b610128565b60405190815260200161006f565b6000826001600160a01b0316866001600160a01b03161480156100e05750816001600160a01b0316846001600160a01b0316145b9695505050505050565b6000816001600160a01b0316866001600160a01b03161480156100e05750816001600160a01b0316856001600160a01b031614905095945050505050565b6040805160028082526060820183526000928392919060208301908036833701905050905084816000815181106101615761016161031e565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106101955761019561031e565b6001600160a01b03928316602091820292909201015260405163d06ca61f60e01b81529087169063d06ca61f906101d29086908590600401610334565b600060405180830381865afa1580156101ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610217919081019061038b565b6001815181106102295761022961031e565b6020026020010151915050949350505050565b80356001600160a01b038116811461025357600080fd5b919050565b600080600080600060a0868803121561027057600080fd5b6102798661023c565b94506102876020870161023c565b93506102956040870161023c565b92506102a36060870161023c565b91506102b16080870161023c565b90509295509295909350565b600080600080608085870312156102d357600080fd5b6102dc8561023c565b93506102ea6020860161023c565b92506102f86040860161023c565b9396929550929360600135925050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000604082018483526020604081850152818551808452606086019150828701935060005b8181101561037e5784516001600160a01b031683529383019391830191600101610359565b5090979650505050505050565b6000602080838503121561039e57600080fd5b825167ffffffffffffffff808211156103b657600080fd5b818501915085601f8301126103ca57600080fd5b8151818111156103dc576103dc610308565b8060051b604051601f19603f8301168101818110858211171561040157610401610308565b60405291825284820192508381018501918883111561041f57600080fd5b938501935b8285101561043d57845184529385019392850192610424565b9897505050505050505056fea2646970667358221220326f7e8193e237e6060ab55bb0827ccb0e627dcb7e47eb0888ef683583b8169364736f6c634300080f0033";

export class DexHelper__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DexHelper> {
    return super.deploy(overrides || {}) as Promise<DexHelper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DexHelper {
    return super.attach(address) as DexHelper;
  }
  connect(signer: Signer): DexHelper__factory {
    return super.connect(signer) as DexHelper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DexHelperInterface {
    return new utils.Interface(_abi) as DexHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DexHelper {
    return new Contract(address, _abi, signerOrProvider) as DexHelper;
  }
}
